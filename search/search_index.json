{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#aioarp","title":"aioarp","text":"<p>Table of Contents</p> <ul> <li>Installation</li> <li>ARP request</li> <li>ARP response</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install aioarp\n</code></pre>"},{"location":"#how-to-send-arp-requests","title":"How to send ARP requests","text":"Sync<pre><code>import aioarp\nresponse = aioarp.request('10.0.2.2', 'enp0s3')\nprint(response.sender_mac)\nee:xx:aa:mm:pp:le  # mac address\n</code></pre> trio<pre><code>import trio\nimport aioarp\nresponse = trio.run(aioarp.arequest, '10.0.2.2', 'enp0s3')\n</code></pre> asyncio<pre><code>import asyncio\nimport aioarp\nresponse = asyncio.run(aioarp.arequest('10.0.2.2', 'enp0s3'))\n</code></pre> <p>This is the packet that was sent over the network. <pre><code>Ethernet II, Src: PcsCompu (YOUR MAC), Dst: Broadcast (ff:ff:ff:ff:ff:ff)\n    Destination: Broadcast (ff:ff:ff:ff:ff:ff)\n    Source: PcsCompu (YOUR MAC)\n    Type: ARP (0x0806)\nAddress Resolution Protocol (request)\n    Hardware type: Ethernet (1)\n    Protocol type: IPv4 (0x0800)\n    Hardware size: 6\n    Protocol size: 4\n    Opcode: request (1)\n    Sender MAC address: PcsCompu (YOUR MAC)\n    Sender IP address: 10.0.2.15\n    Target MAC address: Broadcast (ff:ff:ff:ff:ff:ff)\n    Target IP address: 10.0.2.2\n</code></pre></p> <p>If you want, you can explicitly set all of the ARP headers. To do so, create the <code>ArpPacket</code> instance yourself and then ask <code>aioarp</code> to send that request.</p> Sending ARP packet directly<pre><code>import aioarp\narp_packet = aioarp.ArpPacket(\nhardware_type=aioarp.HardwareType.ethernet,\nprotocol_type=aioarp.Protocol.ip,\nsender_mac='11:11:11:11:11:11',\nsender_ip='127.0.0.1',\ntarget_mac='11:11:11:11:11:11',\ntarget_ip='127.0.0.1')\nresponse = aioarp.sync_send_arp(arp_packet)\n</code></pre> <p>This sends the same ARP request as your <code>ArpPacket</code> instance.</p> <p>Note</p> <p>The Hardware Size and Protocol Size headers are automatically set depending on the hardware type and protocol used.</p> <pre><code>Address Resolution Protocol (request/gratuitous ARP)\n    Hardware type: Ethernet (1)\n    Protocol type: IPv4 (0x0800)\n    Hardware size: 6\n    Protocol size: 4\n    Opcode: request (1)\n    [Is gratuitous: True]\n    Sender MAC address: Private_11:11:11 (11:11:11:11:11:11)\n    Sender IP address: 127.0.0.1\n    Target MAC address: Private_11:11:11 (11:11:11:11:11:11)\n    Target IP address: 127.0.0.1\n</code></pre> <p>As you can see, the packet that was sent over the network was identical to the packet that we created; you can pass whatever you want and build your own arp packet.</p>"},{"location":"#arp-response","title":"ARP response","text":"<p>Let's try again with another arp request and see what we can do with the respone object.</p> <pre><code>import aioarp\nresponse = aioarp.request('10.0.2.2', 'enp0s3')\n# The `sender_mac` header for arp responses, as we know, \n# indicates the actual answer to our question \"Who has 10.0.2.2?\" \n# That is the protocol implementation; \n# the other computer that responds should \n# set the sender_mac to the computer's mac address that we are looking for.\nprint(response.sender_mac)\n# ee:xx:aa:mm:pp:le  # mac address of 10.0.2.2\n</code></pre> <p>Other headers such as <code>hardware_type</code>, <code>protocol_type</code>, and <code>operation</code> can also be seen. </p> <p><pre><code>response.opcode  # operation header\n# Opcode.response  # This indicates that this is an arp response rather than a request.\nresponse.protocol_length\n# 4  This indicates that 4 bytes were used for the sender and target ips because we used ipv4, which is actually 4 bytes.\n</code></pre> Each one has a distinct meaning, which can be found in wikipedia.</p>"},{"location":"#failed-responses","title":"Failed Responses","text":"<p>If the response is not received, aioarp should throw a <code>aioarp.NotFoundError</code> exception. </p> <p>This occurs when the default arp request <code>timeout expires</code>. The timeout is set to 5 by default, but it can be changed by passing the <code>timeout</code> argument to the <code>request</code> function.</p> Without timeout<pre><code>response = aioarp.request('10.0.2.25', 'enp0s3')\n</code></pre> With timeout<pre><code>response = aioarp.request('10.0.2.25', 'enp0s3', timeout=0.5)\n</code></pre>"},{"location":"client/","title":"Requests","text":""},{"location":"client/#sending-requests","title":"Sending requests","text":"request<pre><code>import aioarp\naioarp.request(\"10.0.2.2\", \"enp0s3\")\n</code></pre> <p>This is simply sending the arp packet that searches the network for a mac address of the <code>10.0.2.2</code> ip using the interface that you provided. You can also use a <code>timeout</code> to ensure that waiting for a response does not go on indefinitely.</p> timeout request<pre><code>aioarp.request(\"10.0.2.2\", \"enp0s3\", timeout=0.5)\n</code></pre> <p>This function accepts the network interface that will be used to send the ARP request as the second argument. However, interface is an optional parameter that can be ignored. if it is not passed, aioarp will look up your system's default interface and use it.</p> <p>Example:</p> without specifying interface<pre><code>aioarp.request(\"10.0.2.2\")\n</code></pre> <p>Note</p> <p>If the default network interface is not specified, Aioarp will use the <code>ip</code> command to find it.</p> <p>You can also use the <code>wait_response</code> parameter to tell aioarp whether you need the response or not. without waiting for a response<pre><code>aioarp.request(\"10.0.2.2\", \"enp0s3\", wait_response=False)\n</code></pre></p> <p>Note</p> <p>When the <code>wait_response</code> argument is false, the <code>timeout</code> argument has no effect.</p> <p>This method can also take the <code>sock</code> argument, which is a socket connection that will be used for IO operations. (useful for mocking)</p>"},{"location":"client/#asynchronous-requests","title":"Asynchronous requests","text":"<p>It is very simple to switch from synchronous to asynchronous aioarp; simply use the await keyword and change request to arequest.</p> async request<pre><code>await arequest(\"10.0.2.2\", \"enp0s3\")\n</code></pre> <p>Because the synchronous and asynchronous interfaces shared the same function signatures, all synchronous features worked as expected in asynchronous.</p>"},{"location":"client/#building-requests","title":"Building requests","text":"<p>You may need to build your own ARP packet and set each ARP header to whatever you want; aioarp supports that behavior, and you can pass not only the target ip, but also the source ip, source mac, desctination mac, and so on.</p> <pre><code>arp_packet = aioarp.ArpPacket(\nhardware_type=aioarp.HardwareType.ethernet,\nprotocol_type=aioarp.Protocol.ip,\nsender_mac='11:11:11:11:11:11',\nsender_ip='127.0.0.1',\ntarget_mac='11:11:11:11:11:11',\ntarget_ip='127.0.0.1')\n</code></pre> <p>Now that you have your arp packet with all of the required headers, you can ask <code>aioarp</code> to send that request.</p> <pre><code>aioarp.sync_send_arp(arp_packet, \"enp0s3\")\n</code></pre> <p>If the <code>ArpPacket</code> is too complicated for you, you can use the <code>build_arp_packet</code> function to generate an <code>ArpPacket</code> for you, which you can then modify.</p> build_arp_packet<pre><code>arp_packet = build_arp_packet('10.0.2.2', 'enp0s3')\narp_packet.sender_ip\n'10.0.2.2' \n</code></pre> <p><code>build_arp_packet</code> accepts only two arguments: interface and target IP address.</p>"},{"location":"spoofing/","title":"Arp spoofing","text":"<p>In computer networking, ARP spoofing, ARP cache poisoning, or ARP poison routing, is a technique by which an attacker sends Address Resolution Protocol messages onto a local area network. Generally, the aim is to associate the attacker's MAC address with the IP address of another host, such as the default gateway, causing any traffic meant for that IP address to be sent to the attacker instead.</p> <p>ARP spoofing is supported by default in <code>aioarp</code>, either through the cli or the <code>aioarp</code>'s API.</p> <p>To perform simple ARP spoofing, we must first understand how the <code>spoof</code> command works.</p> <p>Assume our IP address in our local network is 192.168.0.85, and our target IP address in the same network is 192.168.0.81.</p> <p>The target IP address recognizes 192.168.0.1 as our gateway and uses that IP to connect to the internet.</p> <p>But how did he get 192.168.0.1's mac address? He simply makes an ARP request. </p> <p>So he sends the ARP request and waits for an ARP response, but ARP responses can also be sent in the absence of any ARP requests, which is known as <code>Gratuitous ARP</code>.</p> <p>ARP spoofing employs Gratuitous ARP to convince our target IP that the mac address for the gateway is what we sent in the ARP response.</p> <p>Example: spoof command<pre><code>$ aioarp spoof 192.168.0.81 192.168.0.1 11:11:11:11:11:11 --seconds 10\n</code></pre></p> <p>Where...</p> <ul> <li>192.168.0.81 is a target IP</li> <li>192.168.0.81 is a gateway</li> <li>*11:11:11:11:11:11 fake mac address</li> </ul> <p>In other words, <code>aioarp spoof arg1 arg2 arg3</code> means \"tell arg1 that arg2's mac address is arg3\".</p> <p>Now the 192.168.0.81 will think that mac address of 192.168.0.1 is \"11:11:11:11:11:11\" so any traffic he tries to send via that mac address gonna be dropped, and the target ip address will not have access to the internet. We can also use more meaningfull fake mac addresses, such as our mac address, to see any traffic sent by the target ip.</p> <p>Also, if you just want to disable internet access for a specific IP address, you can use a special command that is similar to the spoof command but does not require the mac address.</p> disable command<pre><code>$ aioarp disable 192.168.0.81 192.168.0.1 enp0s3 --seconds 10\n</code></pre> <p>If you send a broadcast ARP message, you can also disable internet access for the entire network, as shown here.</p> Broadcast ARP Spoofing<pre><code>import aioarp\narp_packet = aioarp.build_arp_request('0.0.0.0')\narp_packet.sender_mac = '11:11:11:11:11:11'\narp_packet.sender_ip = '192.168.0.1'\narp_packet.target_mac = 'ff:ff:ff:ff:ff:ff'\naioarp.sync_send_arp(arp_packet)\n</code></pre> <p>or using aioarp's cli</p> <pre><code>$ aioarp spoof 0.0.0.0 192.168.0.1 11:11:11:11:11:11 --seconds 10\n</code></pre> <p>As you can see, we simply want to set the target IP to 0.0.0.0, which is a wildcard for broadcast requests.</p>"}]}